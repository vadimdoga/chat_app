{"version":3,"sources":["components/EmitText/Emit.js","components/ShowText/Show.js","components/UserData/UserData.js","containers/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Emit","props","encode","str","codes","split","map","i","charCodeAt","join","bigInt","encrypt","encodedMsg","n","e","modPow","state","msg","publicObject","Object","handleChange","bind","sendToServer","handleKey","evt","this","setState","target","value","socket","emit","on","entry","preventDefault","encodedMessage","publicKey","values","publicExp","console","log","encryptedMessage","onSubmit","className","type","name","onChange","onKeyPress","Component","Show","scrollToBottom","messagesEnd","scrollIntoView","messages","msgData","senderName","connectedUsers","typing","typingName","prevState","includes","setTimeout","axios","get","then","res","data","sender","key","_id","message","index","splice","indexOf","ref","el","UserData","handelSubmit","document","getElementsByClassName","style","display","React","io","connect","Chat","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAGsBA,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAgDTC,OAAS,SAACC,GACR,IAAMC,EAAQD,EACXE,MAAM,IACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBACXC,KAAK,IAER,OAAOC,IAAON,IAvDG,EAyDnBO,QAAU,SAACC,EAAYC,EAAGC,GACxB,OAAOJ,IAAOE,GAAYG,OAAOD,EAAGD,IAxDnC,EAAKG,MAAQ,CACZC,IAAK,GACLC,aAAcC,QAIhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAVA,E,0EAYNG,GACXC,KAAKC,SAAS,CACZT,IAAKO,EAAIG,OAAOC,U,kCAMlBH,KAAKxB,MAAM4B,OAAOC,KAAK,UAAS,K,0CAGd,IAAD,OACjBL,KAAKxB,MAAM4B,OAAOE,GAAG,aAAa,SAAAC,GAChC,EAAKN,SAAS,CACZR,aAAcc,S,mCAIPR,GAEX,GADAA,EAAIS,iBACkB,KAAnBR,KAAKT,MAAMC,IAAW,CACvB,IAAMiB,EAAiBT,KAAKvB,OAAOuB,KAAKT,MAAMC,KACxCkB,EAAYhB,OAAOiB,OAAOX,KAAKT,MAAME,cAAc,GACnDmB,EAAYlB,OAAOiB,OAAOX,KAAKT,MAAME,cAAc,GACzDoB,QAAQC,IAAI,oBAAsBL,GAClCI,QAAQC,IAAI,eAAiBJ,GAC7BG,QAAQC,IAAI,oBAAsBF,GAClC,IAAMG,EAAmBf,KAAKd,QAAQuB,EAAgBC,EAAWE,GACjEC,QAAQC,IAAI,sBAAwBC,GACpCf,KAAKxB,MAAM4B,OAAOC,KAAK,MAAOU,GAE9Bf,KAAKC,SAAS,CACZT,IAAI,Q,+BAiBP,OACE,6BACE,0BAAMwB,SAAUhB,KAAKH,cACpB,2BACAoB,UAAU,aACVC,KAAK,OAAOC,KAAK,QACjBhB,MAAOH,KAAKT,MAAMC,IAClB4B,SAAUpB,KAAKL,aACf0B,WAAYrB,KAAKF,YAEjB,2BACAmB,UAAU,eACVC,KAAK,SACLf,MAAM,e,GA3EmBmB,a,yBCCdC,G,kBACnB,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KAsDRgD,eAAiB,WACf,EAAKC,YAAYC,kBAtDjB,EAAKnC,MAAQ,CACXoC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,eAAgB,EAChBC,QAAQ,EACRC,WAAY,IAEd,EAAKxD,MAAM4B,OAAOE,GAAG,YAAY,SAAAC,GAC/B,EAAKN,UAAS,SAAAgC,GAAS,MAAK,CAC1BL,QAAQ,GAAD,mBAAMK,EAAUL,SAAhB,CAAyBrB,WAGpC,EAAK/B,MAAM4B,OAAOE,GAAG,YAAY,SAAAC,GAC/B,EAAKN,SAAS,CACZ4B,WAAYtB,OAGhB,EAAK/B,MAAM4B,OAAOE,GAAG,kBAAkB,SAAAC,GACrC,EAAKN,SAAS,CACZ6B,eAAgBvB,OAGpB,EAAK/B,MAAM4B,OAAOE,GAAG,cAAc,SAAAC,GACjC,EAAKN,SAAS,CACZ8B,QAAQ,IAEL,EAAKxC,MAAMyC,WAAWE,SAAS3B,IAClC,EAAKN,UAAS,SAAAgC,GAAS,MAAK,CAC1BD,WAAW,GAAD,mBAAMC,EAAUD,YAAhB,CAA4BzB,QAG1C4B,YAAW,WACT,EAAKlC,SAAS,CACZ8B,QAAQ,MAET,QAGL,EAAKP,eAAiB,EAAKA,eAAe5B,KAApB,gBAzCL,E,iFA2CE,IAAD,OAClBI,KAAKwB,iBACLY,IAAMC,IAAI,iCAAiCC,MAAK,SAAAC,GAC9C,IAAMZ,EAAWY,EAAIC,KACrB,EAAKvC,SAAS,CACZ0B,SAAUA,S,2CAKd3B,KAAKwB,mB,+BAKG,IAAD,OACP,OACE,wBAAIP,UAAU,YACZ,yBAAKA,UAAU,eACb,uBAAGA,UAAU,QAAb,YACA,uBAAGA,UAAU,aAAb,cAAqCjB,KAAKT,MAAMuC,iBAEjD9B,KAAKT,MAAMoC,SAAS9C,KAAI,SAAAW,GAAG,OAC1B,yBACEyB,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAC1B,sBACA,uBAENC,IAAKlD,EAAImD,KAET,wBACE1B,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAC1B,iBACA,mBAGLjD,EAAIoD,SAEP,0BACE3B,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAAS,cAAgB,UAGxDjD,EAAIiD,YAIVzC,KAAKT,MAAMqC,QAAQ/C,KAAI,SAACW,EAAKqD,GAAN,OACtB,yBACE5B,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAC1B,sBACA,uBAENC,IAAKG,GAEL,wBACE5B,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAC1B,iBACA,mBAGLjD,EAAIoD,SAEP,0BACE3B,UACE,EAAK1B,MAAMsC,aAAerC,EAAIiD,OAAS,cAAgB,UAGxDjD,EAAIiD,YAIVzC,KAAKT,MAAMwC,OACR/B,KAAKT,MAAMyC,WAAWnD,KAAI,SAAAsC,GAAI,OAC5B,6BACE,uBAAGF,UAAU,UAAUE,GACvB,0BAAMF,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,YAItBjB,KAAKT,MAAMyC,WAAWc,OAClB9C,KAAKT,MAAMyC,WAAWe,QAAQ,IAIpC,yBACEC,IAAK,SAAAC,GACH,EAAKxB,YAAcwB,U,GAzIG3B,cCFb4B,G,kBACnB,WAAY1E,GAAO,IAAD,8BAChB,4CAAMA,KACDe,MAAQ,CACX4B,KAAM,GACNW,gBAAgB,GAGlB,EAAKqB,aAAe,EAAKA,aAAavD,KAAlB,gBACpB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBARJ,E,0EAULG,GAAK,IAAD,OACfA,EAAIS,iBAEJR,KAAKxB,MAAM4B,OAAOC,KAAK,WAAYL,KAAKT,MAAM4B,MAG9CnB,KAAKxB,MAAM4B,OAAOE,GAAG,qBAAqB,SAAAC,GACrCA,EACW6C,SAASC,uBAAuB,SAAS,GAC/CC,MAAMC,QAAU,OAEtB,EAAKtD,SAAS,CACZkB,KAAM,mC,mCAMDpB,GACXC,KAAKC,SAAS,CACZkB,KAAMpB,EAAIG,OAAOC,U,+BAInB,OACE,yBAAKc,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMD,SAAUhB,KAAKmD,cACnB,kDACA,2BAAOjC,KAAK,OAAOC,KAAK,OAAOhB,MAAOH,KAAKT,MAAM4B,KAAMC,SAAUpB,KAAKL,eACtE,2BAAOuB,KAAK,SAASf,MAAM,kB,GAzCDqD,IAAMlC,Y,QCGtClB,E,OAASqD,EAAGC,QAAQ,2BAWXC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,CAAUvD,OAAQA,IAClB,kBAAC,EAAD,CAAMA,OAAQA,IACd,kBAAC,EAAD,CAAMA,OAAQA,MCALwD,MARf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.5decb968.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Emit.css'\r\nimport bigInt from 'big-integer'\r\n export default class Emit extends Component{\r\n   constructor(props){\r\n     super(props)\r\n     this.state = {\r\n      msg: \"\",\r\n      publicObject: Object\r\n    }\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.sendToServer = this.sendToServer.bind(this)\r\n    this.handleKey = this.handleKey.bind(this)\r\n   }\r\n  handleChange(evt){\r\n    this.setState({\r\n      msg: evt.target.value\r\n    })\r\n    // this.props.socket.emit(\"typing\",true)\r\n\r\n  }\r\n  handleKey(){\r\n    this.props.socket.emit(\"typing\",true)\r\n    \r\n  }\r\n  componentDidMount(){\r\n    this.props.socket.on('publicKey', entry => {\r\n      this.setState({\r\n        publicObject: entry\r\n      })\r\n    })\r\n  }\r\n  sendToServer(evt) {\r\n    evt.preventDefault();\r\n    if(this.state.msg !== \"\"){\r\n      const encodedMessage = this.encode(this.state.msg)\r\n      const publicKey = Object.values(this.state.publicObject)[0]\r\n      const publicExp = Object.values(this.state.publicObject)[1]\r\n      console.log(\"Encoded Message: \" + encodedMessage)\r\n      console.log(\"Public Key: \" + publicKey)\r\n      console.log(\"Public Exponent: \" + publicExp)\r\n      const encryptedMessage = this.encrypt(encodedMessage, publicKey, publicExp)\r\n      console.log(\"Encrypted message: \" + encryptedMessage)\r\n      this.props.socket.emit('msg', encryptedMessage)\r\n      \r\n      this.setState({\r\n        msg:\"\"\r\n      })\r\n    }\r\n    \r\n  }\r\n  encode = (str) => {\r\n    const codes = str\r\n      .split('')\r\n      .map(i => i.charCodeAt())\r\n      .join('')\r\n\r\n    return bigInt(codes)\r\n  }\r\n  encrypt = (encodedMsg, n, e) => {\r\n    return bigInt(encodedMsg).modPow(e, n)\r\n  }\r\n   render(){\r\n     return(\r\n       <div>\r\n         <form onSubmit={this.sendToServer}>\r\n          <input \r\n          className=\"input-text\" \r\n          type=\"text\" name=\"input\" \r\n          value={this.state.msg} \r\n          onChange={this.handleChange}\r\n          onKeyPress={this.handleKey}\r\n          />\r\n          <input \r\n          className=\"input-submit\" \r\n          type=\"submit\" \r\n          value=\"Send\" />\r\n        </form>\r\n       </div>\r\n     )\r\n   }\r\n }","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Show.css\";\r\n\r\nexport default class Show extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      msgData: [],\r\n      senderName: \"\",\r\n      connectedUsers: 0,\r\n      typing: false,\r\n      typingName: []\r\n    };\r\n    this.props.socket.on(\"received\", entry => {\r\n      this.setState(prevState => ({\r\n        msgData: [...prevState.msgData, entry]\r\n      }));\r\n    });\r\n    this.props.socket.on(\"sendName\", entry => {\r\n      this.setState({\r\n        senderName: entry\r\n      });\r\n    });\r\n    this.props.socket.on(\"connectedUsers\", entry => {\r\n      this.setState({\r\n        connectedUsers: entry\r\n      });\r\n    });\r\n    this.props.socket.on(\"typingTrue\", entry => {\r\n      this.setState({\r\n        typing: true\r\n      });\r\n      if (!this.state.typingName.includes(entry)) {\r\n        this.setState(prevState => ({\r\n          typingName: [...prevState.typingName, entry]\r\n        }));\r\n      }\r\n      setTimeout(() => {\r\n        this.setState({\r\n          typing: false\r\n        });\r\n      }, 3000);\r\n    });\r\n\r\n    this.scrollToBottom = this.scrollToBottom.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n    axios.get(\"http://192.168.0.3:8080/chats\").then(res => {\r\n      const messages = res.data;\r\n      this.setState({\r\n        messages: messages\r\n      });\r\n    });\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView();\r\n  };\r\n  render() {\r\n    return (\r\n      <ul className=\"chat-box\">\r\n        <div className=\"chat-header\">\r\n          <p className=\"name\">Chat App</p>\r\n          <p className=\"connected\">Connected: {this.state.connectedUsers}</p>\r\n        </div>\r\n        {this.state.messages.map(msg => (\r\n          <div\r\n            className={\r\n              this.state.senderName === msg.sender\r\n                ? \"flex-container-true\"\r\n                : \"flex-container-false\"\r\n            }\r\n            key={msg._id}\r\n          >\r\n            <li\r\n              className={\r\n                this.state.senderName === msg.sender\r\n                  ? \"chat-text-true\"\r\n                  : \"chat-text-false\"\r\n              }\r\n            >\r\n              {msg.message}\r\n            </li>\r\n            <span\r\n              className={\r\n                this.state.senderName === msg.sender ? \"sender-hide\" : \"sender\"\r\n              }\r\n            >\r\n              {msg.sender}\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {this.state.msgData.map((msg, index) => (\r\n          <div\r\n            className={\r\n              this.state.senderName === msg.sender\r\n                ? \"flex-container-true\"\r\n                : \"flex-container-false\"\r\n            }\r\n            key={index}\r\n          >\r\n            <li\r\n              className={\r\n                this.state.senderName === msg.sender\r\n                  ? \"chat-text-true\"\r\n                  : \"chat-text-false\"\r\n              }\r\n            >\r\n              {msg.message}\r\n            </li>\r\n            <span\r\n              className={\r\n                this.state.senderName === msg.sender ? \"sender-hide\" : \"sender\"\r\n              }\r\n            >\r\n              {msg.sender}\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {this.state.typing\r\n          ? this.state.typingName.map(name => (\r\n              <div>\r\n                <p className=\"sender\">{name}</p>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n              </div>\r\n            ))\r\n          : \r\n          this.state.typingName.splice(\r\n              this.state.typingName.indexOf(0)\r\n            )\r\n            }\r\n\r\n        <div\r\n          ref={el => {\r\n            this.messagesEnd = el;\r\n          }}\r\n        ></div>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './UserData.css'\r\nexport default class UserData extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      name: \"\",\r\n      connectedUsers: false\r\n    }\r\n\r\n    this.handelSubmit = this.handelSubmit.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handelSubmit(evt){\r\n    evt.preventDefault()\r\n    //send name to server\r\n    this.props.socket.emit('userData', this.state.name)\r\n\r\n    //check result from server if name is already connected\r\n    this.props.socket.on(\"availableNickname\", entry => {\r\n      if(entry){\r\n        let modal = document.getElementsByClassName(\"modal\")[0]\r\n        modal.style.display = \"none\"\r\n      } else {\r\n        this.setState({\r\n          name: \"This name is already used\"\r\n        })\r\n      }\r\n    })\r\n\r\n  }\r\n  handleChange(evt){\r\n    this.setState({\r\n      name: evt.target.value\r\n    })\r\n  }\r\n  render() {\r\n    return(\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <form onSubmit={this.handelSubmit}>\r\n            <h1>What is your name?</h1>\r\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Emit from '../components/EmitText/Emit'\r\nimport Show from '../components/ShowText/Show'\r\nimport UserData from '../components/UserData/UserData'\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect('http://192.168.0.3:8080')\r\n\r\nfunction Chat() {\r\n  return(\r\n    <div>\r\n      <UserData socket={socket} />\r\n      <Show socket={socket} />\r\n      <Emit socket={socket} />\r\n    </div>\r\n  )\r\n}\r\nexport default Chat","import React from 'react';\nimport './App.css';\nimport Chat from './containers/Chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}