{"version":3,"sources":["containers/RSA.js","components/EmitText/Emit.js","components/ShowText/Show.js","components/UserData/UserData.js","containers/Chat.js","App.js","serviceWorker.js","index.js"],"names":["bigInt","require","RSA","bits","min","one","shiftLeft","max","prev","p","randBetween","isProbablePrime","keysize","q","totient","e","this","randomPrime","lcm","gcd","notEquals","minus","abs","shiftRight","isZero","n","multiply","d","modInv","encodedMsg","modPow","encryptedMsg","str","codes","split","map","i","charCodeAt","join","code","stringified","toString","string","length","num","Number","substr","String","fromCharCode","Emit","props","state","msg","publicObject","Object","handleChange","bind","sendToServer","handleKey","evt","setState","target","value","socket","emit","on","entry","preventDefault","encodedMessage","encode","publicKey","values","publicExp","encryptedMessage","encrypt","console","log","onSubmit","className","type","name","onChange","onKeyPress","Component","Show","scrollToBottom","messagesEnd","scrollIntoView","messages","msgData","senderName","connectedUsers","typing","typingName","serverEncryptedMessage","sender","privateKey","newServerEncryptedMessage","decrypt","newServerDecodedMessage","decode","prevState","message","includes","setTimeout","axios","get","then","res","data","key","_id","index","splice","indexOf","ref","el","UserData","handelSubmit","document","getElementsByClassName","style","display","React","io","connect","Chat","keys","generate","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0NAAMA,G,MAASC,EAAQ,KAyERC,E,yGAtEMC,GAIjB,IAHA,IAAMC,EAAMJ,EAAOK,IAAIC,UAAUH,EAAO,GAClCI,EAAMP,EAAOK,IAAIC,UAAUH,GAAMK,SAE1B,CACX,IAAIC,EAAIT,EAAOU,YAAYN,EAAKG,GAChC,GAAIE,EAAEE,gBAAgB,KACpB,OAAOF,K,+BAKGG,GACd,IACIH,EACAI,EACAC,EAHEC,EAAIf,EAAO,OAKjB,GACES,EAAIO,KAAKC,YAAYL,EAAU,GAC/BC,EAAIG,KAAKC,YAAYL,EAAU,GAC/BE,EAAUd,EAAOkB,IACfT,EAAED,OACFK,EAAEL,cAEGR,EAAOmB,IAAIJ,EAAGD,GAASM,UAAU,IAAMX,EAAEY,MAAMR,GAAGS,MAAMC,WAAWX,EAAU,EAAI,KAAKY,UAE/F,MAAO,CACLT,IACAU,EAAGhB,EAAEiB,SAASb,GACdc,EAAGZ,EAAEa,OAAOd,M,8BAIDe,EAAYJ,EAAGV,GAC5B,OAAOf,EAAO6B,GAAYC,OAAOf,EAAGU,K,8BAGvBM,EAAcJ,EAAGF,GAC9B,OAAOzB,EAAO+B,GAAcD,OAAOH,EAAGF,K,6BAG1BO,GACZ,IAAMC,EAAQD,EACXE,MAAM,IACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBACXC,KAAK,IAER,OAAOtC,EAAOiC,K,6BAGFM,GAIZ,IAHA,IAAMC,EAAcD,EAAKE,WACrBC,EAAS,GAEJN,EAAI,EAAGA,EAAII,EAAYG,OAAQP,GAAK,EAAG,CAC9C,IAAIQ,EAAMC,OAAOL,EAAYM,OAAOV,EAAG,IAEnCQ,GAAO,IACTF,GAAUK,OAAOC,aAAaH,OAAOL,EAAYM,OAAOV,EAAG,KAC3DA,KAEAM,GAAUK,OAAOC,aAAaJ,GAIlC,OAAOF,M,KClEWO,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACZC,IAAK,GACLC,aAAcC,QAGhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBATA,E,0EAWNG,GACX3C,KAAK4C,SAAS,CACZR,IAAKO,EAAIE,OAAOC,U,kCAKlB9C,KAAKkC,MAAMa,OAAOC,KAAK,UAAS,K,0CAGd,IAAD,OACjBhD,KAAKkC,MAAMa,OAAOE,GAAG,aAAa,SAAAC,GAChC,EAAKN,SAAS,CACZP,aAAca,S,mCAIPP,GAEX,GADAA,EAAIQ,iBACkB,KAAnBnD,KAAKmC,MAAMC,IAAW,CACvB,IAAMgB,EAAiBlE,EAAImE,OAAOrD,KAAKmC,MAAMC,KACvCkB,EAAYhB,OAAOiB,OAAOvD,KAAKmC,MAAME,cAAc,GACnDmB,EAAYlB,OAAOiB,OAAOvD,KAAKmC,MAAME,cAAc,GACnDoB,EAAmBvE,EAAIwE,QAAQN,EAAgBE,EAAWE,GAChEG,QAAQC,IAAI,gCAAkCH,GAC9CzD,KAAKkC,MAAMa,OAAOC,KAAK,MAAOS,GAE9BzD,KAAK4C,SAAS,CACZR,IAAI,Q,+BAOP,OACE,6BACE,0BAAMyB,SAAU7D,KAAKyC,cACpB,2BACAqB,UAAU,aACVC,KAAK,OAAOC,KAAK,QACjBlB,MAAO9C,KAAKmC,MAAMC,IAClB6B,SAAUjE,KAAKuC,aACf2B,WAAYlE,KAAK0C,YAEjB,2BACAoB,UAAU,eACVC,KAAK,SACLjB,MAAM,e,GA5DmBqB,a,yBCCdC,G,kBACnB,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KAgERmC,eAAiB,WACf,EAAKC,YAAYC,kBAhEjB,EAAKpC,MAAQ,CACXqC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,eAAgB,EAChBC,QAAQ,EACRC,WAAY,IAEd,EAAK3C,MAAMa,OAAOE,GAAG,YAAY,SAAAC,GAC/BS,QAAQC,IAAI,YACZ,IAAMkB,EAAyBxC,OAAOiB,OAAOL,GAAO,GAC9C6B,EAASzC,OAAOiB,OAAOL,GAAO,GAEpCS,QAAQC,IAAI,kCAAoCkB,GAChDnB,QAAQC,IAAI,UAAY,EAAK1B,MAAMoB,WACnCK,QAAQC,IAAI,UAAY,EAAK1B,MAAM8C,YACnC,IAAMC,EAA4B/F,EAAIgG,QAAQJ,EAAwB,EAAK5C,MAAM8C,WAAY,EAAK9C,MAAMoB,WAClG6B,EAA0BjG,EAAIkG,OAAOH,GAC3CtB,QAAQC,IAAI,kCAAoCuB,GAChD,EAAKvC,UAAS,SAAAyC,GAAS,MAAK,CAC1BZ,QAAQ,GAAD,mBAAMY,EAAUZ,SAAhB,CAAyB,CAACa,QAASH,EAAyBJ,OAAQA,YAG/E,EAAK7C,MAAMa,OAAOE,GAAG,YAAY,SAAAC,GAC/B,EAAKN,SAAS,CACZ8B,WAAYxB,OAGhB,EAAKhB,MAAMa,OAAOE,GAAG,kBAAkB,SAAAC,GACrC,EAAKN,SAAS,CACZ+B,eAAgBzB,OAGpB,EAAKhB,MAAMa,OAAOE,GAAG,cAAc,SAAAC,GACjC,EAAKN,SAAS,CACZgC,QAAQ,IAEL,EAAKzC,MAAM0C,WAAWU,SAASrC,IAClC,EAAKN,UAAS,SAAAyC,GAAS,MAAK,CAC1BR,WAAW,GAAD,mBAAMQ,EAAUR,YAAhB,CAA4B3B,QAG1CsC,YAAW,WACT,EAAK5C,SAAS,CACZgC,QAAQ,MAET,QAGL,EAAKP,eAAiB,EAAKA,eAAe7B,KAApB,gBAnDL,E,iFAqDE,IAAD,OAClBxC,KAAKqE,iBACLoB,IAAMC,IAAI,iCAAiCC,MAAK,SAAAC,GAC9C,IAAMpB,EAAWoB,EAAIC,KACrB,EAAKjD,SAAS,CACZ4B,SAAUA,S,2CAKdxE,KAAKqE,mB,+BAMG,IAAD,OACP,OACE,wBAAIP,UAAU,YACZ,yBAAKA,UAAU,eACb,uBAAGA,UAAU,QAAb,YACA,uBAAGA,UAAU,aAAb,cAAqC9D,KAAKmC,MAAMwC,iBAEjD3E,KAAKmC,MAAMqC,SAASrD,KAAI,SAAAiB,GAAG,OAC1B,yBACE0B,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAC1B,sBACA,uBAENe,IAAK1D,EAAI2D,KAET,wBACEjC,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAC1B,iBACA,mBAGL3C,EAAIkD,SAEP,0BACExB,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAAS,cAAgB,UAGxD3C,EAAI2C,YAIV/E,KAAKmC,MAAMsC,QAAQtD,KAAI,SAACiB,EAAK4D,GAAN,OACtB,yBACElC,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAC1B,sBACA,uBAENe,IAAKE,GAEL,wBACElC,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAC1B,iBACA,mBAGL3C,EAAIkD,SAEP,0BACExB,UACE,EAAK3B,MAAMuC,aAAetC,EAAI2C,OAAS,cAAgB,UAGxD3C,EAAI2C,YAIV/E,KAAKmC,MAAMyC,OACR5E,KAAKmC,MAAM0C,WAAW1D,KAAI,SAAA6C,GAAI,OAC5B,6BACE,0BAAMF,UAAU,UAAUE,GAC1B,0BAAMF,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,YAItB9D,KAAKmC,MAAM0C,WAAWoB,OAClBjG,KAAKmC,MAAM0C,WAAWqB,QAAQ,IAIpC,yBACEC,IAAK,SAAAC,GACH,EAAK9B,YAAc8B,U,GApJGjC,cCFbkC,G,kBACnB,WAAYnE,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACX6B,KAAM,GACNW,gBAAgB,GAGlB,EAAK2B,aAAe,EAAKA,aAAa9D,KAAlB,gBACpB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBARJ,E,0EAULG,GAAK,IAAD,OACfA,EAAIQ,iBAEJnD,KAAKkC,MAAMa,OAAOC,KAAK,WAAYhD,KAAKmC,MAAM6B,MAG9ChE,KAAKkC,MAAMa,OAAOE,GAAG,qBAAqB,SAAAC,GACrCA,GACWqD,SAASC,uBAAuB,SAAS,GAC/CC,MAAMC,QAAU,OACtB,EAAKxE,MAAMa,OAAOC,KAAK,OAAQ,CAACM,UAAW,EAAKpB,MAAMoB,UAAWE,UAAW,EAAKtB,MAAMsB,aAEvF,EAAKZ,SAAS,CACZoB,KAAM,mC,mCAMDrB,GACX3C,KAAK4C,SAAS,CACZoB,KAAMrB,EAAIE,OAAOC,U,+BAInB,OACE,yBAAKgB,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMD,SAAU7D,KAAKsG,cACnB,kDACA,2BAAOvC,KAAK,OAAOC,KAAK,OAAOlB,MAAO9C,KAAKmC,MAAM6B,KAAMC,SAAUjE,KAAKuC,eACtE,2BAAOwB,KAAK,SAASjB,MAAM,kB,GA1CD6D,IAAMxC,Y,QCItCpB,E,OAAS6D,EAAGC,QAAQ,2BAELC,E,YACnB,aAAc,IAAD,8BACX,+CACK3E,MAAQ,CACXmB,UAAW,KACXE,UAAW,KACXwB,WAAY,MALH,E,iFAUX,IAAM+B,EAAO7H,EAAI8H,SAAS,KAE1BhH,KAAK4C,SAAS,CACZU,UAAWyD,EAAKtG,EAChB+C,UAAWuD,EAAKhH,EAChBiF,WAAY+B,EAAKpG,IAEnBgD,QAAQC,IAAI,SACZD,QAAQC,IAAI,eAAemD,EAAKtG,EAAEgB,YAClCkC,QAAQC,IAAI,gBAAiBmD,EAAKpG,EAAEc,YACpCkC,QAAQC,IAAI,mBAAoBmD,EAAKhH,EAAE0B,c,+BAKvC,OACE,6BACE,kBAAC,EAAD,CAAUsB,OAAQA,EAAQO,UAAWtD,KAAKmC,MAAMmB,UAAWE,UAAWxD,KAAKmC,MAAMqB,YACjF,kBAAC,EAAD,CAAMT,OAAQA,EAAQiC,WAAYhF,KAAKmC,MAAM6C,WAAY1B,UAAWtD,KAAKmC,MAAMmB,YAC/E,kBAAC,EAAD,CAAMP,OAAQA,S,GA9BY4D,IAAMxC,WCIzB8C,MARf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,QCKcoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.cc04b94a.chunk.js","sourcesContent":["const bigInt = require('big-integer');\r\n\r\nclass RSA {\r\n  static randomPrime(bits) {\r\n    const min = bigInt.one.shiftLeft(bits - 1);\r\n    const max = bigInt.one.shiftLeft(bits).prev();\r\n    \r\n    while (true) {\r\n      let p = bigInt.randBetween(min, max);\r\n      if (p.isProbablePrime(256)) {\r\n        return p;\r\n      } \r\n    }\r\n  }\r\n\r\n  static generate(keysize) {\r\n    const e = bigInt(65537);\r\n    let p;\r\n    let q;\r\n    let totient;\r\n  \r\n    do {\r\n      p = this.randomPrime(keysize / 2);\r\n      q = this.randomPrime(keysize / 2);\r\n      totient = bigInt.lcm(\r\n        p.prev(),\r\n        q.prev()\r\n      );\r\n    } while (bigInt.gcd(e, totient).notEquals(1) || p.minus(q).abs().shiftRight(keysize / 2 - 100).isZero());\r\n\r\n    return {\r\n      e, \r\n      n: p.multiply(q),\r\n      d: e.modInv(totient),\r\n    };\r\n  }\r\n\r\n  static encrypt(encodedMsg, n, e) {\r\n    return bigInt(encodedMsg).modPow(e, n);\r\n  }\r\n\r\n  static decrypt(encryptedMsg, d, n) {\r\n    return bigInt(encryptedMsg).modPow(d, n); \r\n  }\r\n\r\n  static encode(str) {\r\n    const codes = str\r\n      .split('')\r\n      .map(i => i.charCodeAt())\r\n      .join('');\r\n\r\n    return bigInt(codes);\r\n  }\r\n\r\n  static decode(code) {\r\n    const stringified = code.toString();\r\n    let string = '';\r\n\r\n    for (let i = 0; i < stringified.length; i += 2) {\r\n      let num = Number(stringified.substr(i, 2));\r\n      \r\n      if (num <= 30) {\r\n        string += String.fromCharCode(Number(stringified.substr(i, 3)));\r\n        i++;\r\n      } else {\r\n        string += String.fromCharCode(num);\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n}\r\n\r\nexport default RSA","import React, { Component } from 'react'\r\nimport './Emit.css'\r\nimport RSA from '../../containers/RSA'\r\n export default class Emit extends Component{\r\n   constructor(props){\r\n     super(props)\r\n     this.state = {\r\n      msg: \"\",\r\n      publicObject: Object\r\n    }\r\n    \r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.sendToServer = this.sendToServer.bind(this)\r\n    this.handleKey = this.handleKey.bind(this)\r\n   }\r\n  handleChange(evt){\r\n    this.setState({\r\n      msg: evt.target.value\r\n    })\r\n\r\n  }\r\n  handleKey(){\r\n    this.props.socket.emit(\"typing\",true)\r\n    \r\n  }\r\n  componentDidMount(){\r\n    this.props.socket.on('publicKey', entry => {\r\n      this.setState({\r\n        publicObject: entry\r\n      })\r\n    })\r\n  }\r\n  sendToServer(evt) {\r\n    evt.preventDefault();\r\n    if(this.state.msg !== \"\"){\r\n      const encodedMessage = RSA.encode(this.state.msg)\r\n      const publicKey = Object.values(this.state.publicObject)[0]\r\n      const publicExp = Object.values(this.state.publicObject)[1]\r\n      const encryptedMessage = RSA.encrypt(encodedMessage, publicKey, publicExp)\r\n      console.log(\"Encrypted message to server: \" + encryptedMessage)\r\n      this.props.socket.emit('msg', encryptedMessage)\r\n      \r\n      this.setState({\r\n        msg:\"\"\r\n      })\r\n    }\r\n    \r\n  }\r\n  \r\n   render(){\r\n     return(\r\n       <div>\r\n         <form onSubmit={this.sendToServer}>\r\n          <input \r\n          className=\"input-text\" \r\n          type=\"text\" name=\"input\" \r\n          value={this.state.msg} \r\n          onChange={this.handleChange}\r\n          onKeyPress={this.handleKey}\r\n          />\r\n          <input \r\n          className=\"input-submit\" \r\n          type=\"submit\" \r\n          value=\"Send\" />\r\n        </form>\r\n       </div>\r\n     )\r\n   }\r\n }","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Show.css\";\r\nimport RSA from '../../containers/RSA'\r\nexport default class Show extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      msgData: [],\r\n      senderName: \"\",\r\n      connectedUsers: 0,\r\n      typing: false,\r\n      typingName: []\r\n    };\r\n    this.props.socket.on(\"received\", entry => {\r\n      console.log(\"received\")\r\n      const serverEncryptedMessage = Object.values(entry)[0]\r\n      const sender = Object.values(entry)[1]\r\n\r\n      console.log(\"Encrypted message from server: \" + serverEncryptedMessage)\r\n      console.log(\"pbkey: \" + this.props.publicKey)\r\n      console.log(\"prkey: \" + this.props.privateKey)\r\n      const newServerEncryptedMessage = RSA.decrypt(serverEncryptedMessage, this.props.privateKey, this.props.publicKey)\r\n      const newServerDecodedMessage = RSA.decode(newServerEncryptedMessage)\r\n      console.log(\"Decrypted message from server: \" + newServerDecodedMessage)\r\n      this.setState(prevState => ({\r\n        msgData: [...prevState.msgData, {message: newServerDecodedMessage, sender: sender}]\r\n      }));\r\n    });\r\n    this.props.socket.on(\"sendName\", entry => {\r\n      this.setState({\r\n        senderName: entry\r\n      });\r\n    });\r\n    this.props.socket.on(\"connectedUsers\", entry => {\r\n      this.setState({\r\n        connectedUsers: entry\r\n      });\r\n    });\r\n    this.props.socket.on(\"typingTrue\", entry => {\r\n      this.setState({\r\n        typing: true\r\n      });\r\n      if (!this.state.typingName.includes(entry)) {\r\n        this.setState(prevState => ({\r\n          typingName: [...prevState.typingName, entry]\r\n        }));\r\n      }\r\n      setTimeout(() => {\r\n        this.setState({\r\n          typing: false\r\n        });\r\n      }, 3000);\r\n    });\r\n\r\n    this.scrollToBottom = this.scrollToBottom.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n    axios.get(\"http://192.168.0.3:8080/chats\").then(res => {\r\n      const messages = res.data;\r\n      this.setState({\r\n        messages: messages\r\n      });\r\n    });\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"chat-box\">\r\n        <div className=\"chat-header\">\r\n          <p className=\"name\">Chat App</p>\r\n          <p className=\"connected\">Connected: {this.state.connectedUsers}</p>\r\n        </div>\r\n        {this.state.messages.map(msg => (\r\n          <div\r\n            className={\r\n              this.state.senderName === msg.sender\r\n                ? \"flex-container-true\"\r\n                : \"flex-container-false\"\r\n            }\r\n            key={msg._id}\r\n          >\r\n            <li\r\n              className={\r\n                this.state.senderName === msg.sender\r\n                  ? \"chat-text-true\"\r\n                  : \"chat-text-false\"\r\n              }\r\n            >\r\n              {msg.message}\r\n            </li>\r\n            <span\r\n              className={\r\n                this.state.senderName === msg.sender ? \"sender-hide\" : \"sender\"\r\n              }\r\n            >\r\n              {msg.sender}\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {this.state.msgData.map((msg, index) => (\r\n          <div\r\n            className={\r\n              this.state.senderName === msg.sender\r\n                ? \"flex-container-true\"\r\n                : \"flex-container-false\"\r\n            }\r\n            key={index}\r\n          >\r\n            <li\r\n              className={\r\n                this.state.senderName === msg.sender\r\n                  ? \"chat-text-true\"\r\n                  : \"chat-text-false\"\r\n              }\r\n            >\r\n              {msg.message}\r\n            </li>\r\n            <span\r\n              className={\r\n                this.state.senderName === msg.sender ? \"sender-hide\" : \"sender\"\r\n              }\r\n            >\r\n              {msg.sender}\r\n            </span>\r\n          </div>\r\n        ))}\r\n        {this.state.typing\r\n          ? this.state.typingName.map(name => (\r\n              <div>\r\n                <span className=\"sender\">{name}</span>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n                <span className=\"dot\"></span>\r\n              </div>\r\n            ))\r\n          : \r\n          this.state.typingName.splice(\r\n              this.state.typingName.indexOf(0)\r\n            )\r\n            }\r\n\r\n        <div\r\n          ref={el => {\r\n            this.messagesEnd = el;\r\n          }}\r\n        ></div>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './UserData.css'\r\nexport default class UserData extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      name: \"\",\r\n      connectedUsers: false\r\n    }\r\n\r\n    this.handelSubmit = this.handelSubmit.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handelSubmit(evt){\r\n    evt.preventDefault()\r\n    //send name to server\r\n    this.props.socket.emit('userData', this.state.name)\r\n\r\n    //check result from server if name is already connected\r\n    this.props.socket.on(\"availableNickname\", entry => {\r\n      if(entry){\r\n        let modal = document.getElementsByClassName(\"modal\")[0]\r\n        modal.style.display = \"none\"\r\n        this.props.socket.emit('keys', {publicKey: this.props.publicKey, publicExp: this.props.publicExp})\r\n      } else {\r\n        this.setState({\r\n          name: \"This name is already used\"\r\n        })\r\n      }\r\n    })\r\n\r\n  }\r\n  handleChange(evt){\r\n    this.setState({\r\n      name: evt.target.value\r\n    })\r\n  }\r\n  render() {\r\n    return(\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <form onSubmit={this.handelSubmit}>\r\n            <h1>What is your name?</h1>\r\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport Emit from '../components/EmitText/Emit'\r\nimport Show from '../components/ShowText/Show'\r\nimport UserData from '../components/UserData/UserData'\r\nimport io from 'socket.io-client'\r\nimport RSA from './RSA'\r\nconst socket = io.connect('http://192.168.0.3:8080')\r\n\r\nexport default class Chat extends React.Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      publicKey: null,\r\n      publicExp: null,\r\n      privateKey: null\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    //generate RSA keys\r\n    const keys = RSA.generate(250)\r\n\r\n    this.setState({\r\n      publicKey: keys.n,\r\n      publicExp: keys.e,\r\n      privateKey: keys.d\r\n    })\r\n    console.log('Keys:')\r\n    console.log('Public Key: ',keys.n.toString())\r\n    console.log('Private Key: ', keys.d.toString())\r\n    console.log('Public Exponent ', keys.e.toString())    \r\n\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <div>\r\n        <UserData socket={socket} publicKey={this.state.publicKey} publicExp={this.state.publicExp}/>\r\n        <Show socket={socket} privateKey={this.state.privateKey} publicKey={this.state.publicKey} />\r\n        <Emit socket={socket} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Chat from './containers/Chat'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}